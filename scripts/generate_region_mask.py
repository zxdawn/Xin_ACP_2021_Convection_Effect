'''
FUNCTION:
    Generate three regions based on Delta AMFs.
INPUTS:
    - TROPOMI L2 data generated by `s5p_main.py`
OUTPUTS:
    - masks_<region_flag>.nc
UPDATES:
    Xin Zhang:
       01/11/2022: Basic
'''

import xarray as xr
import numpy as np
from glob import glob

# Disable warnings
from warnings import filterwarnings
filterwarnings("ignore")


def read_s5p(dirname, date):
    '''Read S5P files'''
    ds = xr.open_mfdataset(glob(f'{dirname}/tm5/S5P_TM5_L2__NO2____{date}*.nc'), group='S5P')
    ds_tm5 = xr.open_mfdataset(glob(f'{dirname}/tm5/S5P_TM5_L2__NO2____{date}*.nc'), group='TM5')
    ds_nolnox = xr.open_mfdataset(glob(f'{dirname}/nolnox/S5P_CHEM_L2__NO2____{date}*.nc'), group='CHEM')
    ds_500lnox = xr.open_mfdataset(glob(f'{dirname}/lnox_500/S5P_CHEM_L2__NO2____{date}*.nc'), group='CHEM')
    ds_700lnox = xr.open_mfdataset(glob(f'{dirname}/lnox_700/S5P_CHEM_L2__NO2____{date}*.nc'), group='CHEM')

    mask = ds['no2_scd_flag']==0
    mask.load()

    return ds.where(mask), ds_tm5.where(mask), ds_nolnox.where(mask),\
           ds_500lnox.where(mask), ds_700lnox.where(mask),\


def get_pressure(ds_tm5):
    '''Add top pressure'''
    topest_pressure = xr.DataArray(np.full((1, ds_tm5.sizes['y'], ds_tm5.sizes['x']), 0),
                                        dims=['plevel', 'y', 'x'])

    s5p_p = xr.concat([ds_tm5['plevels'], topest_pressure], dim='plevel')

    return s5p_p


def integPr(no2, s5p_p, psfc, ptropo):
    '''Integrate the NO2 profiles from psfc to ptropo'''
    layername = no2.dims[0]

    # constants
    R = 287.3
    T0 = 273.15
    g0 = 9.80665
    p0 = 1.01325e5


    subcolumn = 10 * R *T0 /(g0*p0) \
              * no2*1e6 \
              * abs(s5p_p.diff(s5p_p.dims[0])) * 2.6867e16 # DU to moleclues/cm2
        
    sub_layer = (s5p_p <= psfc) & (s5p_p > ptropo)

    vcd = subcolumn.where(sub_layer[:-1, ...].values).sum(layername)

    return vcd


def cal_amf(ds, ds_lnox, da_mod, s5p_p):
    '''Calculate AMF'''
    scdClr = integPr(da_mod * ds_lnox['swClr'],
                     s5p_p,
                     ds['surface_pressure']/1e2, ds_lnox['tropopause_pressure'])

    scdCld = integPr(da_mod * ds_lnox['swCld'],
                     s5p_p,
                     ds['cloud_pressure_crb']/1e2, ds_lnox['tropopause_pressure'])

    vcdGnd = integPr(da_mod, s5p_p, ds['surface_pressure']/1e2, ds_lnox['tropopause_pressure'])

    amfClr = scdClr / vcdGnd
    amfCld = scdCld / vcdGnd

    crf = ds['cloud_radiance_fraction_nitrogendioxide_window']

    amf = amfClr*(1-crf) + amfCld*crf

    return amf


def new_amf(ds, ds_nolnox, ds_lnox, s5p_p, p_min=None, p_max=None, cmap='RdBu_r', cut=0):
    '''
    Replace the a priori profile, recalculate AMF, and
        calculate the percent difference:
            (new_AMF - AMF_nolnox) / AMF_nolnox, units: %

    Finally, plot the percent difference on ax.
    
    Return the plot object.
    '''

    if p_min and p_max:
        p = (p_min <= ds_lnox['plevels']) & (ds_lnox['plevels'] <= p_max)
    elif p_min:
        p = ds_lnox['plevels'] < p_min
    elif p_max:
        p = ds_lnox['plevels'] > p_max
    else:
        p = xr.full_like(ds_lnox['plevels'], True, dtype='bool')

    da_mod = ds_nolnox['no2apriori'].where(~p, ds_lnox['no2apriori'])
    amf_mod = cal_amf(ds, ds_lnox, da_mod, s5p_p)
    amf = ds_nolnox['amfTrop']

    return amf, amf_mod


def get_subset(ds, extend):
    '''Subset data by lon/lat boundaries'''
    subset = (extend[0] <= ds.coords['longitude'].isel(time=0)) \
            & (ds.coords['longitude'].isel(time=0) <= extend[1]) \
            & (extend[2] <= ds.coords['latitude'].isel(time=0)) \
            & (ds.coords['latitude'].isel(time=0) <= extend[3])

    return subset


def main():
    # pick valid data
    print('Reading data ...')
    data_dir = '../data/s5p_chem'
    ds_2019, ds_2019_tm5, ds_2019_nolnox, ds_2019_500lnox, _ = read_s5p(data_dir, '20190725')
    ds_2020, ds_2020_tm5, ds_2020_nolnox, ds_2020_500lnox, _ = read_s5p(data_dir, '20200901')

    # get the pressure
    s5p_p_2019 = get_pressure(ds_2019_tm5)
    s5p_p_2020 = get_pressure(ds_2020_tm5)

    extend_2019 = [118, 119.6, 31.2, 32.8]
    extend_2020 = [118.1, 119.7, 30.5, 32.05]

    subset_2019 = get_subset(ds_2019, extend_2019)
    subset_2020 = get_subset(ds_2020, extend_2020)

    # fresh: MT < -20%
    print('Calculating AMF and fresh mask ...')
    amf, amf_new = new_amf(ds_2019, ds_2019_nolnox, ds_2019_500lnox, s5p_p_2019, p_min=400, p_max=800)
    mask_fresh = ((amf_new-amf)/amf).where(subset_2019) < -0.2

    # downwind: MT > 20%
    print('Calculating AMF and downwind mask ...')
    amf, amf_new = new_amf(ds_2019, ds_2019_nolnox, ds_2019_500lnox, s5p_p_2019, p_min=400, p_max=800)
    mask_downwind = ((amf_new-amf)/amf).where(subset_2019) > 0.2

    # aged: UT > 20%
    print('Calculating AMF and aged mask ...')
    amf, amf_new = new_amf(ds_2020, ds_2020_nolnox, ds_2020_500lnox, s5p_p_2020, p_min=150, p_max=400)
    mask_aged = ((amf_new-amf)/amf).where(subset_2020) > 0.2

    # Rename masks
    mask_fresh = mask_fresh.rename('mask_fresh')
    mask_downwind = mask_downwind.rename('mask_downwind')
    mask_aged = mask_aged.rename('mask_aged')

    # export nc file
    print('Exporting data ...')
    mask_fresh.to_netcdf(f'{data_dir}/mask_fresh.nc')
    mask_downwind.to_netcdf(f'{data_dir}/mask_downwind.nc')
    mask_aged.to_netcdf(f'{data_dir}/mask_aged.nc')

if __name__ == "__main__":
    main()