'''
FUNCTION:
    Generate mean IRRs in three regions.
INPUTS:
    - TROPOMI L2 data generated by `s5p_main.py`
    - Mask data generated by `generate_region_mask.py`
OUTPUTS:
    - masks_<region_flag>.nc
UPDATES:
    Xin Zhang:
       01/11/2022: Basic
'''

import xarray as xr
from glob import glob
import numpy as np

# Disable warnings
from warnings import filterwarnings
filterwarnings("ignore")

NO_RO2_Oxidation = ['ALKO2_NO_IRR', 'C2H5O2_NO_IRR', 'C3H7O2_NO_IRR', 'CH3CO3_NO_IRR', 'CH3O2_NO_IRR',
                    'ENEO2_NO_IRR', 'EO2_NO_IRR', 'ISOPO2_NO_IRR', 'MACRO2_NO_IRR', 'MEKO2_NO_IRR',
                    'PO2_NO_IRR', 'RO2_NO_IRR', 'TERPO2_NO_IRR', 'TOLO2_NO_IRR', 'XO2_NO_IRR']

reaction_dict = {'NO_HO2_IRR': 'NO + HO$_2$ -> OH + NO$_2$', 
                 'NO_RO2_Oxidation': 'NO + R$_i$O$_2$ -> NO$_2$ + R$_i$O',
                 'O1D_CB4_H2O_IRR': 'O($^1D$) + H$_2$O -> OH',
                 'OH_O3_IRR': 'O$_3$ + OH ->  HO$_2$ + O$_2$',
                 'HO2_O3_IRR': 'O$_3$ + HO$_2$ -> OH + 2O$_2$',
                }

reaction_keys = NO_RO2_Oxidation+list(reaction_dict.keys())
reaction_keys.remove('NO_RO2_Oxidation')
save_irr_dir = '../data/wrfchem/irr/'


def read_mask(dirname):
    '''Read region masks'''
    mask_fresh = xr.open_dataset(f'{dirname}/mask_fresh.nc')['mask_fresh']
    mask_downwind = xr.open_dataset(f'{dirname}/mask_downwind.nc')['mask_downwind']
    mask_aged = xr.open_dataset(f'{dirname}/mask_aged.nc')['mask_aged']

    return mask_fresh, mask_downwind, mask_aged

def read_irr(dirname, date):
    '''Read IRR data'''
    ds = xr.open_mfdataset(glob(f'{dirname}/tm5/S5P_TM5_L2__NO2____{date}*.nc'), group='S5P')
    irr = xr.open_mfdataset(glob(f'{dirname}/lnox_500/S5P_IRR_L2__NO2____{date}*.nc'), group='S5P')['p']
    irr_lnox = xr.open_mfdataset(glob(f'{dirname}/lnox_500/S5P_IRR_L2__NO2____{date}*.nc'), group='CHEM')
    irr_nolnox = xr.open_mfdataset(glob(f'{dirname}/nolnox/S5P_IRR_L2__NO2____{date}*.nc'), group='CHEM')

    mask = ds['no2_scd_flag']==0
    mask.load()

    # return ds.where(mask)
    return irr.where(mask), irr_lnox.where(mask), irr_nolnox.where(mask)


def combine_reaction(da, reaction_dict):
    '''Sum some reactions and combine these together'''
    # calculate the sum of several pre-defined reactions
    da_sel = da.sel(varname=NO_RO2_Oxidation).sum(dim='varname')
    da_sel = da_sel.assign_coords(varname='NO_RO2_Oxidation').expand_dims('varname')

    # concat all reactions we need
    final_key = list(reaction_dict.keys())
    final_key.remove('NO_RO2_Oxidation')
    da = xr.concat([da.sel(varname=final_key), da_sel], 'varname')

    # add units (don'y know why it's not saved in the final nc file ...)
    da.attrs['units'] = 'molec. cm$^{-3}$ s$^{-1}$'

    return da


def mask_irr(mask, irr_pressure, ds_lnox, ds_nolnox, reaction_dict, region, pmax, pmin):
    # get the mean pressure levels in the mask
    irr_pressure = irr_pressure.isel(layer=slice(0, -1))\
                               .where(mask, drop=True).mean(['y', 'x']).load()

    # calculate the mean IRR of pressure levels in the mask
    da_lnox = ds_lnox['IRR'].sel(varname=reaction_keys)\
                            .assign_coords({'layer':irr_pressure}) \
                            .where(mask, drop=True).sel(layer=slice(pmax, pmin)).mean(['y', 'x'])
    da_nolnox = ds_nolnox['IRR'].sel(varname=reaction_keys)\
                                .assign_coords({'layer':irr_pressure}) \
                                .where(mask, drop=True).sel(layer=slice(pmax, pmin)).mean(['y', 'x'])
    print(f'Loading lnox data in {region} region')
    import time
    start_time = time.time()
    print(da_lnox.load())
    print("--- %s seconds ---" % (time.time() - start_time))

    print(f'Loading nolnox data in {region} region')
    start_time = time.time()
    print(da_nolnox.load())
    print("--- %s seconds ---" % (time.time() - start_time))

    # calculate the summation of some reactions and select the useful reactions
    da_lnox = combine_reaction(da_lnox, reaction_dict)
    da_nolnox = combine_reaction(da_nolnox, reaction_dict)

    # calcualte the IRR per seconds
    delta_lnox = da_lnox['Time'].diff(dim='Time')[0] / np.timedelta64(1, 's') # seconds
    da_lnox = da_lnox / delta_lnox.values  # molec. cm-3 s-1
    delta_nolnox = da_lnox['Time'].diff(dim='Time')[0] / np.timedelta64(1, 's') # seconds
    da_nolnox = da_nolnox / delta_nolnox.values

    merge_da = xr.merge([da_lnox.rename('irr_lnox').diff('Time'),
                         da_nolnox.rename('irr_nolnox').diff('Time')])
    # delete for saving memory
    del da_lnox, da_nolnox

    savename = f'irr_{region}_{pmax}hPa_{pmin}hPa.nc'
    save_irr(merge_da, savename)


def save_irr(ds, savename):
    # set compression
    comp = dict(zlib=True, complevel=9)
    # save to one netcdf file
    encoding = {var: comp for var in ds.data_vars}
    print(f'Saving {save_irr_dir+savename} ...')
    print(ds)
    ds.to_netcdf(path=save_irr_dir+savename,
                        engine='netcdf4',
                        encoding=encoding)
    # delete for saving memory
    del ds

# pick valid data
print('Reading masks ...')
data_dir = '../data/s5p_chem'
mask_fresh, mask_downwind, mask_aged = read_mask(data_dir)

# read IRR data which regridded to S5P pixels
irr_2019, irr_2019_lnox, irr_2019_nolnox = read_irr('../data/s5p_chem', '20190725')
irr_2020, irr_2020_lnox, irr_2020_nolnox = read_irr('../data/s5p_chem', '20200901')

# Mask the IRR data by region mask and deal with chemistry reactions
mask_irr(mask_fresh, irr_2019, irr_2019_lnox, irr_2019_nolnox, reaction_dict, 'fresh', pmax=800, pmin=500)
mask_irr(mask_fresh, irr_2019, irr_2019_lnox, irr_2019_nolnox, reaction_dict, 'fresh', pmax=500, pmin=200)
mask_irr(mask_downwind, irr_2019, irr_2019_lnox, irr_2019_nolnox, reaction_dict, 'downwind', pmax=800, pmin=500)
mask_irr(mask_downwind, irr_2019, irr_2019_lnox, irr_2019_nolnox, reaction_dict, 'downwind', pmax=500, pmin=200)
mask_irr(mask_aged, irr_2020, irr_2020_lnox, irr_2020_nolnox, reaction_dict, 'aged', pmax=800, pmin=500)
mask_irr(mask_aged, irr_2020, irr_2020_lnox, irr_2020_nolnox, reaction_dict, 'aged', pmax=500, pmin=200)
