'''
FUNCTION:
    Plot NO, NO2, and NOx profiles with/without LNOx in three regions.
INPUTS:
    - TROPOMI L2 data generated by `s5p_main.py`
    - Mask data generated by `generate_region_mask.py`
OUTPUTS:
    - nox_profiles.pdf
UPDATES:
    Xin Zhang:
       01/11/2022: Basic
'''


import xarray as xr
import numpy as np
from glob import glob
import proplot as pplt

# Disable warnings
from warnings import filterwarnings
filterwarnings("ignore")


def read_s5p(dirname, date):
    '''Read generated S5P files'''
    ds = xr.open_mfdataset(glob(f'{dirname}/tm5/S5P_TM5_L2__NO2____{date}*.nc'), group='S5P')
    ds_tm5 = xr.open_mfdataset(glob(f'{dirname}/tm5/S5P_TM5_L2__NO2____{date}*.nc'), group='TM5')
    ds_nolnox = xr.open_mfdataset(glob(f'{dirname}/nolnox/S5P_CHEM_L2__NO2____{date}*.nc'), group='CHEM')
    ds_500lnox = xr.open_mfdataset(glob(f'{dirname}/lnox_500/S5P_CHEM_L2__NO2____{date}*.nc'), group='CHEM')
    ds_700lnox = xr.open_mfdataset(glob(f'{dirname}/lnox_700/S5P_CHEM_L2__NO2____{date}*.nc'), group='CHEM')

    mask = ds['no2_scd_flag']==0
    mask.load()

    return ds.where(mask), ds_tm5.where(mask), ds_nolnox.where(mask),\
           ds_500lnox.where(mask), ds_700lnox.where(mask),\


def read_mask(dirname):
    '''Read the region masks'''
    mask_fresh = xr.open_dataset(f'{dirname}/mask_fresh.nc')['mask_fresh']
    mask_downwind = xr.open_dataset(f'{dirname}/mask_downwind.nc')['mask_downwind']
    mask_aged = xr.open_dataset(f'{dirname}/mask_aged.nc')['mask_aged']

    return mask_fresh, mask_downwind, mask_aged


def mask_data(mask, ds_tm5, ds_nolnox, ds_500lnox, ds_700lnox):
    '''Mask the data'''
    pressure = ds_tm5['plevels'].where(mask, drop=True).mean(['y', 'x']).load()

    no2_tm5 = ds_tm5['no2apriori'].where(mask, drop=True).mean(['y', 'x']).load()
    no2_nolnox = ds_nolnox['no2apriori'].where(mask, drop=True).mean(['y', 'x']).load()
    no2_500lnox = ds_500lnox['no2apriori'].where(mask, drop=True).mean(['y', 'x']).load()
    no2_700lnox = ds_700lnox['no2apriori'].where(mask, drop=True).mean(['y', 'x']).load()

    no_nolnox = ds_nolnox['noapriori'].where(mask, drop=True).mean(['y', 'x']).load()
    no_500lnox = ds_500lnox['noapriori'].where(mask, drop=True).mean(['y', 'x']).load()
    no_700lnox = ds_700lnox['noapriori'].where(mask, drop=True).mean(['y', 'x']).load()

    o3_nolnox = ds_nolnox['o3apriori'].where(mask, drop=True).mean(['y', 'x']).load()
    o3_500lnox = ds_500lnox['o3apriori'].where(mask, drop=True).mean(['y', 'x']).load()
    o3_700lnox = ds_700lnox['o3apriori'].where(mask, drop=True).mean(['y', 'x']).load()

    return pressure, no2_tm5, no2_nolnox, no2_500lnox, no2_700lnox, \
           no_nolnox, no_500lnox, no_700lnox, \
           o3_nolnox, o3_500lnox, o3_700lnox


def plot_no2_profile(ax, pressure, cld_pressure, no2_tm5, no2_nolnox, no2_500lnox, no2_700lnox):
    '''Plot the NO2 profiles with different LNOx settings'''
    l1 = ax.plot(no2_tm5*1e12, pressure, label='TM5', c='gray7')
    l2 = ax.plot(no2_nolnox*1e12, pressure, label='No LNO$_x$', c='blue7')
    l3 = ax.plot(no2_500lnox*1e12, pressure, label='500 mol/flash', c='green7')
    l4 = ax.plot(no2_700lnox*1e12, pressure, label='700 mol/flash', c='red7')

    l5 = ax.axhline(cld_pressure, label='Cloud Optical Pressure', lw=2, ls='--', color='blue7')
    ax.format(xlim=(10, 1e4), ylim=(1000, 100), ylabel='Pressure (hPa)', xlabel='NO$_2$ (pptv)')

    return [l1, l2, l3, l4, l5]


def plot_lnox_profile(ax, pressure, cld_pressure,
                      no2_nolnox, no2_500lnox, no2_700lnox,
                      no_nolnox, no_500lnox, no_700lnox):
    '''Plot difference of LNOx profiles'''
    l1 = ax.plot((no2_500lnox-no2_nolnox)*1e12, pressure, label='LNO$_2$ (500 mol/flash)', c='green7')
    l2 = ax.plot((no2_700lnox-no2_nolnox)*1e12, pressure, label='LNO$_2$ (700 mol/flash)', c='red7')
    l3 = ax.plot((no2_500lnox-no2_nolnox+no_500lnox-no_nolnox)*1e12, pressure, label='LNO$_x$ (500 mol/flash)', c='green7', ls='--')
    l4 = ax.plot((no2_700lnox-no2_nolnox+no_700lnox-no_nolnox)*1e12, pressure, label='LNO$_x$ (700 mol/flash)', c='red7', ls='--')

    l5 = ax.axhline(cld_pressure, label='Cloud Optical Pressure', lw=2, ls='--', color='blue7')
    ax.format(xlim=(10, 8000), ylim=(1000, 100), ylabel='Pressure (hPa)', xlabel='(pptv)')

    return [l1, l2, l3, l4, l5]


def plot_o3_profile(ax, pressure, cld_pressure,
                      o3_nolnox, o3_500lnox, o3_700lnox):
    '''Plot the O3 profiles'''
    l1 = ax.plot((o3_500lnox-o3_nolnox)*1e9, pressure, label='500 mol/flash - \n 0 mol/flash', c='green7')
    l2 = ax.plot((o3_700lnox-o3_nolnox)*1e9, pressure, label='700 mol/flash - \n 0 mol/flash', c='red7')

    # l3 = ax.axhline(cld_pressure, label='Cloud Optical Pressure', lw=2, ls='--', color='blue7')
    ax.format(xlim=(-3, 3), ylim=(1000, 100), ylabel='Pressure (hPa)', xlabel='P(O$_3$) [ppbv]')

    return [l1, l2]


# pick valid data
print('Reading data ...')
data_dir = '../data/s5p_chem'
ds_2019, ds_2019_tm5, ds_2019_nolnox, ds_2019_500lnox, ds_2019_700lnox = read_s5p(data_dir, '20190725')
ds_2020, ds_2020_tm5, ds_2020_nolnox, ds_2020_500lnox, ds_2020_700lnox = read_s5p(data_dir, '20200901')

print('Reading masks ...')
mask_fresh, mask_downwind, mask_aged = read_mask(data_dir)

print('Calculate the mean NO2 in fresh mask ...')
pressure_fresh, no2_tm5_fresh, no2_nolnox_fresh, no2_500lnox_fresh, no2_700lnox_fresh, \
   no_nolnox_fresh, no_500lnox_fresh, no_700lnox_fresh, \
   o3_nolnox_fresh, o3_500lnox_fresh, o3_700lnox_fresh = \
   mask_data(mask_fresh, ds_2019_tm5, ds_2019_nolnox, ds_2019_500lnox, ds_2019_700lnox)

pressure_downwind, no2_tm5_downwind, no2_nolnox_downwind, no2_500lnox_downwind, no2_700lnox_downwind, \
   no_nolnox_downwind, no_500lnox_downwind, no_700lnox_downwind, \
   o3_nolnox_downwind, o3_500lnox_downwind, o3_700lnox_downwind = \
   mask_data(mask_downwind, ds_2019_tm5, ds_2019_nolnox, ds_2019_500lnox, ds_2019_700lnox)

pressure_aged, no2_tm5_aged, no2_nolnox_aged, no2_500lnox_aged, no2_700lnox_aged, \
   no_nolnox_aged, no_500lnox_aged, no_700lnox_aged, \
   o3_nolnox_aged, o3_500lnox_aged, o3_700lnox_aged = \
   mask_data(mask_aged, ds_2020_tm5, ds_2020_nolnox, ds_2020_500lnox, ds_2020_700lnox)

cp_2019 = ds_2019['cloud_pressure_crb']/1e2
cp_2020 = ds_2020['cloud_pressure_crb']/1e2

print('Calculate the mean cloud pressures in masks ...')
cp_fresh = cp_2019.where(mask_fresh, drop=True).mean(['y', 'x']).load()
cp_downwind = cp_2019.where(mask_downwind, drop=True).mean(['y', 'x']).load()
cp_aged = cp_2020.where(mask_aged, drop=True).mean(['y', 'x']).load()

print('Plotting ...')
fig, axs = pplt.subplots(nrows=2, ncols=3, spany=0, sharex=0)#sharex=0, sharey=0)#, spany=1)

ax = axs[0]
plot_no2_profile(ax, pressure_fresh, cp_fresh, no2_tm5_fresh,
                 no2_nolnox_fresh, no2_500lnox_fresh, no2_700lnox_fresh)

ax = axs[1]
plot_no2_profile(ax, pressure_downwind, cp_downwind, no2_tm5_downwind,
                 no2_nolnox_downwind, no2_500lnox_downwind, no2_700lnox_downwind)

ax = axs[2]
lines = plot_no2_profile(ax, pressure_aged, cp_aged, no2_tm5_aged,
                         no2_nolnox_aged, no2_500lnox_aged, no2_700lnox_aged)

ax = axs[3]
plot_lnox_profile(ax, pressure_fresh, cp_fresh,
                  no2_nolnox_fresh, no2_500lnox_fresh, no2_700lnox_fresh,
                  no_nolnox_fresh, no_500lnox_fresh, no_700lnox_fresh)

ax = axs[4]
plot_lnox_profile(ax, pressure_downwind, cp_downwind,
                 no2_nolnox_downwind, no2_500lnox_downwind, no2_700lnox_downwind,
                 no_nolnox_downwind, no_500lnox_downwind, no_700lnox_downwind)

ax = axs[5]
lnox_lines = plot_lnox_profile(ax, pressure_aged, cp_aged,
                               no2_nolnox_aged, no2_500lnox_aged, no2_700lnox_aged,
                               no_nolnox_aged, no_500lnox_aged, no_700lnox_aged)

fig.legend(lines, ncol=1, row=1, loc='r')
fig.legend(lnox_lines, ncol=1, row=2, loc='r')


# add height ticks
axs_dual = axs.dualy('height', label='', ticks=2.5)
for ax in[axs_dual[2], axs_dual[5]]:
    ax.format(ylabel='Height (km)')

axs.format(xscale='log')
axs.format(grid=False, toplabels=('Fresh Lightning', 'Downwind of Fresh Lightning', 'Aged Lightning'))

savename = '../figures/nox_profile.pdf'
print(f'Saved to {savename}')
fig.savefig(savename)